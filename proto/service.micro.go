// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service.proto

/*
Package sde is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	TypeIdRequest
	TypeNameSearchRequest
	TypeNameRequest
	TypeResponse
	TypesResponse
	TypeNameAndIdResponse
	Type
*/
package sde

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TypeQuery service

type TypeQueryService interface {
	FindTypesByTypeIds(ctx context.Context, in *TypeIdRequest, opts ...client.CallOption) (*TypeResponse, error)
	SearchTypesByTypeNames(ctx context.Context, in *TypeNameSearchRequest, opts ...client.CallOption) (*TypesResponse, error)
	FindTypeByTypeName(ctx context.Context, in *TypeNameRequest, opts ...client.CallOption) (*TypeResponse, error)
	SearchForTypes(ctx context.Context, in *TypeNameRequest, opts ...client.CallOption) (*TypeNameAndIdResponse, error)
}

type typeQueryService struct {
	c           client.Client
	serviceName string
}

func TypeQueryServiceClient(serviceName string, c client.Client) TypeQueryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "sde"
	}
	return &typeQueryService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *typeQueryService) FindTypesByTypeIds(ctx context.Context, in *TypeIdRequest, opts ...client.CallOption) (*TypeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TypeQuery.FindTypesByTypeIds", in)
	out := new(TypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeQueryService) SearchTypesByTypeNames(ctx context.Context, in *TypeNameSearchRequest, opts ...client.CallOption) (*TypesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TypeQuery.SearchTypesByTypeNames", in)
	out := new(TypesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeQueryService) FindTypeByTypeName(ctx context.Context, in *TypeNameRequest, opts ...client.CallOption) (*TypeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TypeQuery.FindTypeByTypeName", in)
	out := new(TypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeQueryService) SearchForTypes(ctx context.Context, in *TypeNameRequest, opts ...client.CallOption) (*TypeNameAndIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TypeQuery.SearchForTypes", in)
	out := new(TypeNameAndIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TypeQuery service

type TypeQueryHandler interface {
	FindTypesByTypeIds(context.Context, *TypeIdRequest, *TypeResponse) error
	SearchTypesByTypeNames(context.Context, *TypeNameSearchRequest, *TypesResponse) error
	FindTypeByTypeName(context.Context, *TypeNameRequest, *TypeResponse) error
	SearchForTypes(context.Context, *TypeNameRequest, *TypeNameAndIdResponse) error
}

func RegisterTypeQueryHandler(s server.Server, hdlr TypeQueryHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&TypeQuery{hdlr}, opts...))
}

type TypeQuery struct {
	TypeQueryHandler
}

func (h *TypeQuery) FindTypesByTypeIds(ctx context.Context, in *TypeIdRequest, out *TypeResponse) error {
	return h.TypeQueryHandler.FindTypesByTypeIds(ctx, in, out)
}

func (h *TypeQuery) SearchTypesByTypeNames(ctx context.Context, in *TypeNameSearchRequest, out *TypesResponse) error {
	return h.TypeQueryHandler.SearchTypesByTypeNames(ctx, in, out)
}

func (h *TypeQuery) FindTypeByTypeName(ctx context.Context, in *TypeNameRequest, out *TypeResponse) error {
	return h.TypeQueryHandler.FindTypeByTypeName(ctx, in, out)
}

func (h *TypeQuery) SearchForTypes(ctx context.Context, in *TypeNameRequest, out *TypeNameAndIdResponse) error {
	return h.TypeQueryHandler.SearchForTypes(ctx, in, out)
}
