// Code generated by protoc-gen-go.
// source: sde-service.proto
// DO NOT EDIT!

/*
Package abaeve_eveonline is a generated protocol buffer package.

It is generated from these files:
	sde-service.proto

It has these top-level messages:
	TypeIdRequest
	TypeNameRequest
	TypeResponse
	TypeNameAndIdResponse
	Type
*/
package abaeve_eveonline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import abaeve_common "github.com/abaeve/services-common/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Locale int32

const (
	Locale_EN Locale = 0
	Locale_DE Locale = 1
	Locale_FR Locale = 2
	Locale_JA Locale = 3
	Locale_RU Locale = 4
	Locale_ZH Locale = 5
)

var Locale_name = map[int32]string{
	0: "EN",
	1: "DE",
	2: "FR",
	3: "JA",
	4: "RU",
	5: "ZH",
}
var Locale_value = map[string]int32{
	"EN": 0,
	"DE": 1,
	"FR": 2,
	"JA": 3,
	"RU": 4,
	"ZH": 5,
}

func (x Locale) String() string {
	return proto.EnumName(Locale_name, int32(x))
}
func (Locale) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TypeIdRequest struct {
	TypeId []int32 `protobuf:"varint,1,rep,packed,name=TypeId" json:"TypeId,omitempty"`
	Locale Locale  `protobuf:"varint,2,opt,name=Locale,enum=abaeve.eveonline.Locale" json:"Locale,omitempty"`
}

func (m *TypeIdRequest) Reset()                    { *m = TypeIdRequest{} }
func (m *TypeIdRequest) String() string            { return proto.CompactTextString(m) }
func (*TypeIdRequest) ProtoMessage()               {}
func (*TypeIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TypeIdRequest) GetTypeId() []int32 {
	if m != nil {
		return m.TypeId
	}
	return nil
}

func (m *TypeIdRequest) GetLocale() Locale {
	if m != nil {
		return m.Locale
	}
	return Locale_EN
}

type TypeNameRequest struct {
	TypeName []string `protobuf:"bytes,1,rep,name=TypeName" json:"TypeName,omitempty"`
	Locale   Locale   `protobuf:"varint,2,opt,name=Locale,enum=abaeve.eveonline.Locale" json:"Locale,omitempty"`
}

func (m *TypeNameRequest) Reset()                    { *m = TypeNameRequest{} }
func (m *TypeNameRequest) String() string            { return proto.CompactTextString(m) }
func (*TypeNameRequest) ProtoMessage()               {}
func (*TypeNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TypeNameRequest) GetTypeName() []string {
	if m != nil {
		return m.TypeName
	}
	return nil
}

func (m *TypeNameRequest) GetLocale() Locale {
	if m != nil {
		return m.Locale
	}
	return Locale_EN
}

type TypeResponse struct {
	Type            []*Type                              `protobuf:"bytes,1,rep,name=Type" json:"Type,omitempty"`
	ResponseDetails *abaeve_common.ServiceResponseDetail `protobuf:"bytes,2,opt,name=ResponseDetails" json:"ResponseDetails,omitempty"`
}

func (m *TypeResponse) Reset()                    { *m = TypeResponse{} }
func (m *TypeResponse) String() string            { return proto.CompactTextString(m) }
func (*TypeResponse) ProtoMessage()               {}
func (*TypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TypeResponse) GetType() []*Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TypeResponse) GetResponseDetails() *abaeve_common.ServiceResponseDetail {
	if m != nil {
		return m.ResponseDetails
	}
	return nil
}

type TypeNameAndIdResponse struct {
	TypeId          []int32                              `protobuf:"varint,1,rep,packed,name=TypeId" json:"TypeId,omitempty"`
	Name            []string                             `protobuf:"bytes,2,rep,name=Name" json:"Name,omitempty"`
	ResponseDetails *abaeve_common.ServiceResponseDetail `protobuf:"bytes,3,opt,name=ResponseDetails" json:"ResponseDetails,omitempty"`
}

func (m *TypeNameAndIdResponse) Reset()                    { *m = TypeNameAndIdResponse{} }
func (m *TypeNameAndIdResponse) String() string            { return proto.CompactTextString(m) }
func (*TypeNameAndIdResponse) ProtoMessage()               {}
func (*TypeNameAndIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TypeNameAndIdResponse) GetTypeId() []int32 {
	if m != nil {
		return m.TypeId
	}
	return nil
}

func (m *TypeNameAndIdResponse) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TypeNameAndIdResponse) GetResponseDetails() *abaeve_common.ServiceResponseDetail {
	if m != nil {
		return m.ResponseDetails
	}
	return nil
}

type Type struct {
	BasePrice     float32 `protobuf:"fixed32,1,opt,name=BasePrice" json:"BasePrice,omitempty"`
	Capacity      float32 `protobuf:"fixed32,2,opt,name=Capacity" json:"Capacity,omitempty"`
	Description   string  `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
	GraphicId     int32   `protobuf:"varint,4,opt,name=GraphicId" json:"GraphicId,omitempty"`
	GroupId       int32   `protobuf:"varint,5,opt,name=GroupId" json:"GroupId,omitempty"`
	IconId        int32   `protobuf:"varint,6,opt,name=IconId" json:"IconId,omitempty"`
	MarketGroupId int32   `protobuf:"varint,7,opt,name=MarketGroupId" json:"MarketGroupId,omitempty"`
	Mass          float32 `protobuf:"fixed32,8,opt,name=Mass" json:"Mass,omitempty"`
	Name          string  `protobuf:"bytes,9,opt,name=Name" json:"Name,omitempty"`
	PortionSize   int32   `protobuf:"varint,10,opt,name=PortionSize" json:"PortionSize,omitempty"`
	Published     bool    `protobuf:"varint,11,opt,name=Published" json:"Published,omitempty"`
	Radius        float32 `protobuf:"fixed32,12,opt,name=Radius" json:"Radius,omitempty"`
	FactionName   string  `protobuf:"bytes,13,opt,name=FactionName" json:"FactionName,omitempty"`
	Volume        float32 `protobuf:"fixed32,14,opt,name=Volume" json:"Volume,omitempty"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Type) GetBasePrice() float32 {
	if m != nil {
		return m.BasePrice
	}
	return 0
}

func (m *Type) GetCapacity() float32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Type) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Type) GetGraphicId() int32 {
	if m != nil {
		return m.GraphicId
	}
	return 0
}

func (m *Type) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *Type) GetIconId() int32 {
	if m != nil {
		return m.IconId
	}
	return 0
}

func (m *Type) GetMarketGroupId() int32 {
	if m != nil {
		return m.MarketGroupId
	}
	return 0
}

func (m *Type) GetMass() float32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *Type) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Type) GetPortionSize() int32 {
	if m != nil {
		return m.PortionSize
	}
	return 0
}

func (m *Type) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *Type) GetRadius() float32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func (m *Type) GetFactionName() string {
	if m != nil {
		return m.FactionName
	}
	return ""
}

func (m *Type) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func init() {
	proto.RegisterType((*TypeIdRequest)(nil), "abaeve.eveonline.TypeIdRequest")
	proto.RegisterType((*TypeNameRequest)(nil), "abaeve.eveonline.TypeNameRequest")
	proto.RegisterType((*TypeResponse)(nil), "abaeve.eveonline.TypeResponse")
	proto.RegisterType((*TypeNameAndIdResponse)(nil), "abaeve.eveonline.TypeNameAndIdResponse")
	proto.RegisterType((*Type)(nil), "abaeve.eveonline.Type")
	proto.RegisterEnum("abaeve.eveonline.Locale", Locale_name, Locale_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Publisher API

type Publisher interface {
	Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error
}

type publisher struct {
	c     client.Client
	topic string
}

func (p *publisher) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {
	return p.c.Publish(ctx, p.c.NewPublication(p.topic, msg), opts...)
}

func NewPublisher(topic string, c client.Client) Publisher {
	if c == nil {
		c = client.NewClient()
	}
	return &publisher{c, topic}
}

// Subscriber API

func RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {
	return s.Subscribe(s.NewSubscriber(topic, h, opts...))
}

// Client API for TypeQuery service

type TypeQueryClient interface {
	FindTypesByTypeIds(ctx context.Context, in *TypeIdRequest, opts ...client.CallOption) (*TypeResponse, error)
	FindTypesByTypeNames(ctx context.Context, in *TypeNameRequest, opts ...client.CallOption) (*TypeResponse, error)
	SearchForTypes(ctx context.Context, in *TypeNameRequest, opts ...client.CallOption) (*TypeNameAndIdResponse, error)
}

type typeQueryClient struct {
	c           client.Client
	serviceName string
}

func NewTypeQueryClient(serviceName string, c client.Client) TypeQueryClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "abaeve.eveonline"
	}
	return &typeQueryClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *typeQueryClient) FindTypesByTypeIds(ctx context.Context, in *TypeIdRequest, opts ...client.CallOption) (*TypeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TypeQuery.FindTypesByTypeIds", in)
	out := new(TypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeQueryClient) FindTypesByTypeNames(ctx context.Context, in *TypeNameRequest, opts ...client.CallOption) (*TypeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TypeQuery.FindTypesByTypeNames", in)
	out := new(TypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeQueryClient) SearchForTypes(ctx context.Context, in *TypeNameRequest, opts ...client.CallOption) (*TypeNameAndIdResponse, error) {
	req := c.c.NewRequest(c.serviceName, "TypeQuery.SearchForTypes", in)
	out := new(TypeNameAndIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TypeQuery service

type TypeQueryHandler interface {
	FindTypesByTypeIds(context.Context, *TypeIdRequest, *TypeResponse) error
	FindTypesByTypeNames(context.Context, *TypeNameRequest, *TypeResponse) error
	SearchForTypes(context.Context, *TypeNameRequest, *TypeNameAndIdResponse) error
}

func RegisterTypeQueryHandler(s server.Server, hdlr TypeQueryHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&TypeQuery{hdlr}, opts...))
}

type TypeQuery struct {
	TypeQueryHandler
}

func (h *TypeQuery) FindTypesByTypeIds(ctx context.Context, in *TypeIdRequest, out *TypeResponse) error {
	return h.TypeQueryHandler.FindTypesByTypeIds(ctx, in, out)
}

func (h *TypeQuery) FindTypesByTypeNames(ctx context.Context, in *TypeNameRequest, out *TypeResponse) error {
	return h.TypeQueryHandler.FindTypesByTypeNames(ctx, in, out)
}

func (h *TypeQuery) SearchForTypes(ctx context.Context, in *TypeNameRequest, out *TypeNameAndIdResponse) error {
	return h.TypeQueryHandler.SearchForTypes(ctx, in, out)
}

func init() { proto.RegisterFile("sde-service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x5d, 0xd2, 0x8f, 0xad, 0xee, 0xda, 0x05, 0x0b, 0x26, 0xab, 0x42, 0x10, 0xaa, 0x49, 0x54,
	0x93, 0xd6, 0xa2, 0xc2, 0x03, 0xaf, 0x1b, 0x5d, 0x47, 0x11, 0xab, 0x8a, 0xcb, 0x87, 0x00, 0x09,
	0xe4, 0x26, 0x57, 0xd4, 0xa2, 0x8d, 0x43, 0x9c, 0x54, 0x2a, 0x3f, 0x81, 0x47, 0xf8, 0x05, 0xfc,
	0x53, 0x64, 0x3b, 0xe9, 0x17, 0xad, 0x34, 0xc1, 0x93, 0x73, 0x8f, 0xef, 0x39, 0xf7, 0xe4, 0xc4,
	0x0e, 0xba, 0x25, 0x7d, 0x38, 0x93, 0x10, 0xcd, 0xb8, 0x07, 0xcd, 0x30, 0x12, 0xb1, 0xc0, 0x0e,
	0x1b, 0x31, 0x98, 0x41, 0x13, 0x66, 0x20, 0x82, 0x09, 0x0f, 0xa0, 0xf6, 0xe4, 0x0b, 0x8f, 0xc7,
	0xc9, 0xa8, 0xe9, 0x89, 0x69, 0xcb, 0x6c, 0xb6, 0x52, 0x8a, 0x3c, 0xf3, 0xc4, 0x74, 0x2a, 0x82,
	0x96, 0xa6, 0xb6, 0x4c, 0x61, 0x74, 0xea, 0xef, 0x51, 0xe5, 0xf5, 0x3c, 0x84, 0x9e, 0x4f, 0xe1,
	0x5b, 0x02, 0x32, 0xc6, 0xc7, 0xa8, 0x68, 0x00, 0x62, 0xb9, 0xb9, 0x46, 0x81, 0xa6, 0x15, 0x7e,
	0x84, 0x8a, 0x2f, 0x85, 0xc7, 0x26, 0x40, 0x6c, 0xd7, 0x6a, 0x54, 0xdb, 0xa4, 0xb9, 0xe9, 0xa0,
	0x69, 0xf6, 0x69, 0xda, 0x57, 0xff, 0x8c, 0x8e, 0x14, 0xb7, 0xcf, 0xa6, 0x90, 0x89, 0xd7, 0xd0,
	0x41, 0x06, 0x69, 0xf9, 0x12, 0x5d, 0xd4, 0xff, 0x30, 0xe0, 0x87, 0x85, 0x0e, 0x15, 0x9d, 0x82,
	0x0c, 0x45, 0x20, 0x01, 0x9f, 0xa2, 0xbc, 0xaa, 0xb5, 0x74, 0xb9, 0x7d, 0xfc, 0xb7, 0x80, 0xee,
	0xd6, 0x3d, 0xb8, 0x8f, 0x8e, 0x32, 0x5e, 0x07, 0x62, 0xc6, 0x27, 0x52, 0xcf, 0x2d, 0xb7, 0x4f,
	0x32, 0x5a, 0x9a, 0xd3, 0xd0, 0x84, 0xb8, 0xde, 0x4c, 0x37, 0xc9, 0xf5, 0x5f, 0x16, 0xba, 0x93,
	0xbd, 0xcb, 0x79, 0xe0, 0xab, 0x40, 0x53, 0x57, 0xbb, 0x12, 0xc5, 0x28, 0xaf, 0x83, 0xb0, 0x75,
	0x10, 0xfa, 0x79, 0x9b, 0xab, 0xdc, 0xff, 0xb8, 0xfa, 0x99, 0x33, 0x91, 0xe0, 0xbb, 0xa8, 0x74,
	0xc1, 0x24, 0x0c, 0x22, 0xee, 0xa9, 0x7c, 0xac, 0x86, 0x4d, 0x97, 0x80, 0xfa, 0x2e, 0xcf, 0x58,
	0xc8, 0x3c, 0x1e, 0xcf, 0x75, 0x0a, 0x36, 0x5d, 0xd4, 0xd8, 0x45, 0xe5, 0x0e, 0x48, 0x2f, 0xe2,
	0x61, 0xcc, 0x45, 0xa0, 0xed, 0x94, 0xe8, 0x2a, 0xa4, 0xb4, 0xaf, 0x22, 0x16, 0x8e, 0xb9, 0xd7,
	0xf3, 0x49, 0xde, 0xb5, 0x1a, 0x05, 0xba, 0x04, 0x30, 0x41, 0xfb, 0x57, 0x91, 0x48, 0xc2, 0x9e,
	0x4f, 0x0a, 0x7a, 0x2f, 0x2b, 0x55, 0x30, 0x3d, 0x4f, 0x04, 0x3d, 0x9f, 0x14, 0xf5, 0x46, 0x5a,
	0xe1, 0x13, 0x54, 0xb9, 0x66, 0xd1, 0x57, 0x88, 0x33, 0xde, 0xbe, 0xde, 0x5e, 0x07, 0x55, 0x7c,
	0xd7, 0x4c, 0x4a, 0x72, 0xa0, 0xfd, 0xea, 0xe7, 0x45, 0xa4, 0x25, 0x6d, 0xd2, 0x44, 0xea, 0xa2,
	0xf2, 0x40, 0x44, 0xca, 0xe8, 0x90, 0x7f, 0x07, 0x82, 0xb4, 0xd6, 0x2a, 0xa4, 0xfc, 0x0f, 0x92,
	0xd1, 0x84, 0xcb, 0x31, 0xf8, 0xa4, 0xec, 0x5a, 0x8d, 0x03, 0xba, 0x04, 0x94, 0x4b, 0xca, 0x7c,
	0x9e, 0x48, 0x72, 0xa8, 0x27, 0xa5, 0x95, 0xd2, 0xed, 0x32, 0x4f, 0x89, 0xe8, 0x91, 0x15, 0x93,
	0xcb, 0x0a, 0xa4, 0x98, 0x6f, 0xc5, 0x24, 0x99, 0x02, 0xa9, 0x1a, 0xa6, 0xa9, 0x4e, 0x9f, 0x66,
	0x27, 0x1d, 0x17, 0x91, 0x7d, 0xd9, 0x77, 0xf6, 0xd4, 0xda, 0xb9, 0x74, 0x2c, 0xb5, 0x76, 0xa9,
	0x63, 0xab, 0xf5, 0xc5, 0xb9, 0x93, 0x53, 0x2b, 0x7d, 0xe3, 0xe4, 0xd5, 0xfa, 0xe1, 0xb9, 0x53,
	0x68, 0xff, 0xb6, 0x51, 0x49, 0x7d, 0xce, 0x57, 0x09, 0x44, 0x73, 0xfc, 0x0e, 0xe1, 0x2e, 0x0f,
	0x7c, 0x05, 0xc8, 0x8b, 0xb9, 0x39, 0x55, 0x12, 0xdf, 0xdf, 0x7e, 0xec, 0x17, 0x37, 0xbc, 0x76,
	0x6f, 0xc7, 0xbd, 0x48, 0x8f, 0x4e, 0x7d, 0x0f, 0x7f, 0x44, 0xb7, 0x37, 0x84, 0xd5, 0xfb, 0x48,
	0xfc, 0x60, 0x3b, 0x73, 0xe5, 0x86, 0xdf, 0x40, 0xfc, 0x13, 0xaa, 0x0e, 0x81, 0x45, 0xde, 0xb8,
	0x2b, 0x22, 0x3d, 0xe1, 0x26, 0xb2, 0x0f, 0x77, 0xb7, 0xac, 0x5d, 0xb6, 0xfa, 0xde, 0xa8, 0xa8,
	0x7f, 0x6c, 0x8f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x41, 0x71, 0x75, 0xd3, 0x35, 0x05, 0x00,
	0x00,
}
